// DxcDisassembler.inc - Generated by hctgen.py
// DO NOT MODIFY!!!
// Changes to this code are made in gen_intrin_main.txt

static const char *OpCodeSignatures[] = {
  "(index)",  // TempRegLoad
  "(index,value)",  // TempRegStore
  "(regIndex,index,component)",  // MinPrecXRegLoad
  "(regIndex,index,component,value)",  // MinPrecXRegStore
  "(inputSigId,rowIndex,colIndex,gsVertexAxis)",  // LoadInput
  "(outputSigId,rowIndex,colIndex,value)",  // StoreOutput
  "(value)",  // FAbs
  "(value)",  // Saturate
  "(value)",  // IsNaN
  "(value)",  // IsInf
  "(value)",  // IsFinite
  "(value)",  // IsNormal
  "(value)",  // Cos
  "(value)",  // Sin
  "(value)",  // Tan
  "(value)",  // Acos
  "(value)",  // Asin
  "(value)",  // Atan
  "(value)",  // Hcos
  "(value)",  // Hsin
  "(value)",  // Htan
  "(value)",  // Exp
  "(value)",  // Frc
  "(value)",  // Log
  "(value)",  // Sqrt
  "(value)",  // Rsqrt
  "(value)",  // Round_ne
  "(value)",  // Round_ni
  "(value)",  // Round_pi
  "(value)",  // Round_z
  "(value)",  // Bfrev
  "(value)",  // Countbits
  "(value)",  // FirstbitLo
  "(value)",  // FirstbitHi
  "(value)",  // FirstbitSHi
  "(a,b)",  // FMax
  "(a,b)",  // FMin
  "(a,b)",  // IMax
  "(a,b)",  // IMin
  "(a,b)",  // UMax
  "(a,b)",  // UMin
  "(a,b)",  // IMul
  "(a,b)",  // UMul
  "(a,b)",  // UDiv
  "(a,b)",  // UAddc
  "(a,b)",  // USubb
  "(a,b,c)",  // FMad
  "(a,b,c)",  // Fma
  "(a,b,c)",  // IMad
  "(a,b,c)",  // UMad
  "(a,b,c)",  // Msad
  "(a,b,c)",  // Ibfe
  "(a,b,c)",  // Ubfe
  "(width,offset,value,replacedValue)",  // Bfi
  "(ax,ay,bx,by)",  // Dot2
  "(ax,ay,az,bx,by,bz)",  // Dot3
  "(ax,ay,az,aw,bx,by,bz,bw)",  // Dot4
  "(resourceClass,rangeId,index,nonUniformIndex)",  // CreateHandle
  "(handle,byteOffset,alignment)",  // CBufferLoad
  "(handle,regIndex)",  // CBufferLoadLegacy
  "(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,clamp)",  // Sample
  "(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,bias,clamp)",  // SampleBias
  "(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)",  // SampleLevel
  "(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)",  // SampleGrad
  "(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,compareValue,clamp)",  // SampleCmp
  "(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,compareValue)",  // SampleCmpLevelZero
  "(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)",  // TextureLoad
  "(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask)",  // TextureStore
  "(srv,index,wot)",  // BufferLoad
  "(uav,coord0,coord1,value0,value1,value2,value3,mask)",  // BufferStore
  "(uav,inc)",  // BufferUpdateCounter
  "(status)",  // CheckAccessFullyMapped
  "(handle,mipLevel)",  // GetDimensions
  "(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel)",  // TextureGather
  "(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,channel,compareValue)",  // TextureGatherCmp
  "(srv,index)",  // Texture2DMSGetSamplePosition
  "(index)",  // RenderTargetGetSamplePosition
  "()",  // RenderTargetGetSampleCount
  "(handle,atomicOp,offset0,offset1,offset2,newValue)",  // AtomicBinOp
  "(handle,offset0,offset1,offset2,compareValue,newValue)",  // AtomicCompareExchange
  "(barrierMode)",  // Barrier
  "(handle,sampler,coord0,coord1,coord2,clamped)",  // CalculateLOD
  "(condition)",  // Discard
  "(value)",  // DerivCoarseX
  "(value)",  // DerivCoarseY
  "(value)",  // DerivFineX
  "(value)",  // DerivFineY
  "(inputSigId,inputRowIndex,inputColIndex,offsetX,offsetY)",  // EvalSnapped
  "(inputSigId,inputRowIndex,inputColIndex,sampleIndex)",  // EvalSampleIndex
  "(inputSigId,inputRowIndex,inputColIndex)",  // EvalCentroid
  "()",  // SampleIndex
  "()",  // Coverage
  "()",  // InnerCoverage
  "(component)",  // ThreadId
  "(component)",  // GroupId
  "(component)",  // ThreadIdInGroup
  "()",  // FlattenedThreadIdInGroup
  "(streamId)",  // EmitStream
  "(streamId)",  // CutStream
  "(streamId)",  // EmitThenCutStream
  "()",  // GSInstanceID
  "(lo,hi)",  // MakeDouble
  "(value)",  // SplitDouble
  "(inputSigId,row,col,index)",  // LoadOutputControlPoint
  "(inputSigId,row,col)",  // LoadPatchConstant
  "(component)",  // DomainLocation
  "(outputSigID,row,col,value)",  // StorePatchConstant
  "()",  // OutputControlPointID
  "()",  // PrimitiveID
  "()",  // CycleCounterLegacy
  "()",  // WaveIsFirstLane
  "()",  // WaveGetLaneIndex
  "()",  // WaveGetLaneCount
  "(cond)",  // WaveAnyTrue
  "(cond)",  // WaveAllTrue
  "(value)",  // WaveActiveAllEqual
  "(cond)",  // WaveActiveBallot
  "(value,lane)",  // WaveReadLaneAt
  "(value)",  // WaveReadLaneFirst
  "(value,op,sop)",  // WaveActiveOp
  "(value,op)",  // WaveActiveBit
  "(value,op,sop)",  // WavePrefixOp
  "(value,quadLane)",  // QuadReadLaneAt
  "(value,op)",  // QuadOp
  "(value)",  // BitcastI16toF16
  "(value)",  // BitcastF16toI16
  "(value)",  // BitcastI32toF32
  "(value)",  // BitcastF32toI32
  "(value)",  // BitcastI64toF64
  "(value)",  // BitcastF64toI64
  "(value)",  // LegacyF32ToF16
  "(value)",  // LegacyF16ToF32
  "(value)",  // LegacyDoubleToFloat
  "(value)",  // LegacyDoubleToSInt32
  "(value)",  // LegacyDoubleToUInt32
  "(value)",  // WaveAllBitCount
  "(value)",  // WavePrefixBitCount
  "(inputSigId,inputRowIndex,inputColIndex,VertexID)",  // AttributeAtVertex
  "()",  // ViewID
  "(srv,index,elementOffset,mask,alignment)",  // RawBufferLoad
  "(uav,index,elementOffset,value0,value1,value2,value3,mask,alignment)",  // RawBufferStore
  "()",  // InstanceID
  "()",  // InstanceIndex
  "()",  // HitKind
  "()",  // RayFlags
  "(col)",  // DispatchRaysIndex
  "(col)",  // DispatchRaysDimensions
  "(col)",  // WorldRayOrigin
  "(col)",  // WorldRayDirection
  "(col)",  // ObjectRayOrigin
  "(col)",  // ObjectRayDirection
  "(row,col)",  // ObjectToWorld
  "(row,col)",  // WorldToObject
  "()",  // RayTMin
  "()",  // RayTCurrent
  "()",  // IgnoreHit
  "()",  // AcceptHitAndEndSearch
  "(AccelerationStructure,RayFlags,InstanceInclusionMask,RayContributionToHitGroupIndex,MultiplierForGeometryContributionToShaderIndex,MissShaderIndex,Origin_X,Origin_Y,Origin_Z,TMin,Direction_X,Direction_Y,Direction_Z,TMax,payload)",  // TraceRay
  "(THit,HitKind,Attributes)",  // ReportHit
  "(ShaderIndex,Parameter)",  // CallShader
  "(Resource)",  // CreateHandleForLib
  "()",  // PrimitiveIndex
  "(acc,ax,ay,bx,by)",  // Dot2AddHalf
  "(acc,a,b)",  // Dot4AddI8Packed
  "(acc,a,b)",  // Dot4AddU8Packed
  "(value)",  // WaveMatch
  "(value,mask0,mask1,mask2,mask3,op,sop)",  // WaveMultiPrefixOp
  "(value,mask0,mask1,mask2,mask3)",  // WaveMultiPrefixBitCount
  "(numVertices,numPrimitives)",  // SetMeshOutputCounts
  "(PrimitiveIndex,VertexIndex0,VertexIndex1,VertexIndex2)",  // EmitIndices
  "()",  // GetMeshPayload
  "(outputSigId,rowIndex,colIndex,value,vertexIndex)",  // StoreVertexOutput
  "(outputSigId,rowIndex,colIndex,value,primitiveIndex)",  // StorePrimitiveOutput
  "(threadGroupCountX,threadGroupCountY,threadGroupCountZ,payload)",  // DispatchMesh
  "(feedbackTex,sampledTex,sampler,c0,c1,c2,c3,clamp)",  // WriteSamplerFeedback
  "(feedbackTex,sampledTex,sampler,c0,c1,c2,c3,bias,clamp)",  // WriteSamplerFeedbackBias
  "(feedbackTex,sampledTex,sampler,c0,c1,c2,c3,lod)",  // WriteSamplerFeedbackLevel
  "(feedbackTex,sampledTex,sampler,c0,c1,c2,c3,ddx0,ddx1,ddx2,ddy0,ddy1,ddy2,clamp)",  // WriteSamplerFeedbackGrad
  "(constRayFlags)",  // AllocateRayQuery
  "(rayQueryHandle,accelerationStructure,rayFlags,instanceInclusionMask,origin_X,origin_Y,origin_Z,tMin,direction_X,direction_Y,direction_Z,tMax)",  // RayQuery_TraceRayInline
  "(rayQueryHandle)",  // RayQuery_Proceed
  "(rayQueryHandle)",  // RayQuery_Abort
  "(rayQueryHandle)",  // RayQuery_CommitNonOpaqueTriangleHit
  "(rayQueryHandle,t)",  // RayQuery_CommitProceduralPrimitiveHit
  "(rayQueryHandle)",  // RayQuery_CommittedStatus
  "(rayQueryHandle)",  // RayQuery_CandidateType
  "(rayQueryHandle,row,col)",  // RayQuery_CandidateObjectToWorld3x4
  "(rayQueryHandle,row,col)",  // RayQuery_CandidateWorldToObject3x4
  "(rayQueryHandle,row,col)",  // RayQuery_CommittedObjectToWorld3x4
  "(rayQueryHandle,row,col)",  // RayQuery_CommittedWorldToObject3x4
  "(rayQueryHandle)",  // RayQuery_CandidateProceduralPrimitiveNonOpaque
  "(rayQueryHandle)",  // RayQuery_CandidateTriangleFrontFace
  "(rayQueryHandle)",  // RayQuery_CommittedTriangleFrontFace
  "(rayQueryHandle,component)",  // RayQuery_CandidateTriangleBarycentrics
  "(rayQueryHandle,component)",  // RayQuery_CommittedTriangleBarycentrics
  "(rayQueryHandle)",  // RayQuery_RayFlags
  "(rayQueryHandle,component)",  // RayQuery_WorldRayOrigin
  "(rayQueryHandle,component)",  // RayQuery_WorldRayDirection
  "(rayQueryHandle)",  // RayQuery_RayTMin
  "(rayQueryHandle)",  // RayQuery_CandidateTriangleRayT
  "(rayQueryHandle)",  // RayQuery_CommittedRayT
  "(rayQueryHandle)",  // RayQuery_CandidateInstanceIndex
  "(rayQueryHandle)",  // RayQuery_CandidateInstanceID
  "(rayQueryHandle)",  // RayQuery_CandidateGeometryIndex
  "(rayQueryHandle)",  // RayQuery_CandidatePrimitiveIndex
  "(rayQueryHandle,component)",  // RayQuery_CandidateObjectRayOrigin
  "(rayQueryHandle,component)",  // RayQuery_CandidateObjectRayDirection
  "(rayQueryHandle)",  // RayQuery_CommittedInstanceIndex
  "(rayQueryHandle)",  // RayQuery_CommittedInstanceID
  "(rayQueryHandle)",  // RayQuery_CommittedGeometryIndex
  "(rayQueryHandle)",  // RayQuery_CommittedPrimitiveIndex
  "(rayQueryHandle,component)",  // RayQuery_CommittedObjectRayOrigin
  "(rayQueryHandle,component)",  // RayQuery_CommittedObjectRayDirection
  "()",  // GeometryIndex
  "(rayQueryHandle)",  // RayQuery_CandidateInstanceContributionToHitGroupIndex
  "(rayQueryHandle)",  // RayQuery_CommittedInstanceContributionToHitGroupIndex
  "(res,props)",  // AnnotateHandle
  "(bind,index,nonUniformIndex)",  // CreateHandleFromBinding
  "(index,samplerHeap,nonUniformIndex)",  // CreateHandleFromHeap
  "(unpackMode,pk)",  // Unpack4x8
  "(packMode,x,y,z,w)",  // Pack4x8
  "()",  // IsHelperLane
  "(cond,op)",  // QuadVote
  "(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1)",  // TextureGatherRaw
  "(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,compareValue,lod)",  // SampleCmpLevel
  "(srv,coord0,coord1,coord2,value0,value1,value2,value3,mask,sampleIdx)"  // TextureStoreSample
};

